load sobel;
load roberts;
load filters;
img1 = read_image3D('','9343 AM.bmp');
imgt = read_image('','9343 AM Edges.bmp');
imgt = im2bw(imgt);
-----------------------------------------------

p1 = edge2MT(img1,sobelX,sobelY,imgt);

best =

    0.1951D
   47.0000T


p2 = blur1edge2MT(img1,sobelX,sobelY,imgt,46);

best =

    0.1951D
   47.0000T
    1.0000S

p3 = blur2edge2MT(img1,sobelX,sobelY,imgt,46);

best =

    0.1951D
   30.0000T
    3.0000S
    0.5000Si



plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
---------------------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,robertsA,robertsB,imgt);

best =

    0.2092D
    8.0000T

p2 = blur1edge2MT(img1,robertsA,robertsB,imgt,46);

best =

    0.2080D
    8.0000T
    3.0000S

p3 = blur2edge2MT(img1,robertsA,robertsB,imgt,46);


plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt);

best =

    0.2097D
   11.0000T

p2 = blur1edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt,46);

best =

    0.2072D
   11.0000T
    3.0000S


p3 = blur2edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt,46);



plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,first_order_gaussian_filter_1d_length5,first_order_gaussian_filter_1d_length5',imgt);

best =

    0.2021D
    6.0000T

p2 = blur1edge2MT(img1,first_order_gaussian_filter_1d_length5,first_order_gaussian_filter_1d_length5',imgt,46);


best =

    0.2021D
    6.0000T
    1.0000S

p3 = blur2edge2MT(img1,first_order_gaussian_filter_1d_length5',first_order_gaussian_filter_1d_length5',imgt,46);




plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = laplaceZeroCross(img1,laplacian,imgt);


best =

    0.6652D
    7.0000T


p2 = laplaceZeroCrosswBlur(img1,laplacian,imgt);

best =

    0.7149
    0.1000
    0.5000

plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
--------------------------------------------------------------------------------------------------------------
canny(img1,imgt);

plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
---------------------------------------------------------------------------------------------------------

Method: For every image we have multiple filters, multiple noise filters.
With each image calculated, we have a value range to threshold the convulved image by.
For some noise filters, we have factors such as sigma and mean value. We also can to take into consideration the filter size:

A technique we can use, that is not too accurate but can help produce a viable result would be to the following;
For each image:
Apply each edge filter:
    1) For each edge filter,convulve it with an image (both X and Y) ,calculate the magnitude/zero-crossing
       and then threshold the image by a range of values.
    2) Calculate the ROC value for each image produced (due to the range of threshold values, we get multiple images).
    3) The threshold value that produces the best ROC value (indicated by the smallest Manhatten distance from (0,1))
    can be used as a close approximation of where the best threshold may lie.
    4) Apply then the (mean) noise filter, use a range of sizes for the filter, and use the earlier best threshold as a base.
    5) Tweak threshold value (to nearest integer / 1 decimal place) for the best ROC value.
    6) Apply then the (gauss) noise filter, use a range of sizes for the filter, and use the earlier best threshold as a base.
    7) Tweak threshold value (to nearest integer / 1 decimal place) for the best ROC value.
    8) 
    







