load sobel;
load roberts;
load filters;
img1 = read_image3D('','9343 AM.bmp');
imgt = read_image('','9343 AM Edges.bmp');
imgt = im2bw(imgt);
-----------------------------------------------

p1 = edge2MT(img1,sobelX,sobelY,imgt);

best =

    0.1951D
   47.0000T


p2 = blur1edge2MT(img1,sobelX,sobelY,imgt,46);

best =

    0.1951D
   47.0000T
    1.0000S

p3 = blur2edge2MT(img1,sobelX,sobelY,imgt,46);

best =

    0.1951D
   30.0000T
    3.0000S
    0.5000Si



plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
---------------------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,robertsA,robertsB,imgt);

best =

    0.2092D
    8.0000T

p2 = blur1edge2MT(img1,robertsA,robertsB,imgt,46);

best =

    0.2080D
    8.0000T
    3.0000S

p3 = blur2edge2MT(img1,robertsA,robertsB,imgt,46);


plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt);

best =

    0.2097D
   11.0000T

p2 = blur1edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt,46);

best =

    0.2072D
   11.0000T
    3.0000S


p3 = blur2edge2MT(img1,difference_gradient_filterX,difference_gradient_filterY,imgt,46);



plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = edge2MT(img1,first_order_gaussian_filter_1d_length5,first_order_gaussian_filter_1d_length5',imgt);

best =

    0.2021D
    6.0000T

p2 = blur1edge2MT(img1,first_order_gaussian_filter_1d_length5,first_order_gaussian_filter_1d_length5',imgt,46);


best =

    0.2021D
    6.0000T
    1.0000S

p3 = blur2edge2MT(img1,first_order_gaussian_filter_1d_length5',first_order_gaussian_filter_1d_length5',imgt,46);




plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:),p3(1,:),p3(2,:));
--------------------------------------------------------------------------------------------------------------

p1 = laplaceZeroCross(img1,laplacian,imgt);


best =

    0.6652D
    7.0000T


p2 = laplaceZeroCrosswBlur(img1,laplacian,imgt);

best =

    0.7149
    0.1000
    0.5000

plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:),p2(1,:),p2(2,:));
--------------------------------------------------------------------------------------------------------------
canny(img1,imgt);

plot([0:0.1:1],[0:0.1:1]);
plot([0:0.1:1],[0:0.1:1],p1(1,:),p1(2,:));
---------------------------------------------------------------------------------------------------------

Method: For every image we have, there are many factors that we can change.
We are interested in the best edge filter available, so our method of determining this will be as follows:

	A)For each edge filter
		1) Convolve the edge filter with the image (both in X direction and Y).
		2) Calculate the magnitude/zero-crossing (of image from step 1).
		
		3) Use a range of values for thresholding  the image (from step 2).	
			a) Calculate the ROC value for each image produced (from step 3). *[due to the range of threshold values (0-100), we get multiple images]
			b) The threshold value that produces the best ROC value (indicated by the smallest Manhatten distance from (0,1))
				can be used as a close approximation of where the best threshold value may lie (to the nearest integer).
				
		4) Repeat step 3 with the mean filter (if possible) and also use multiple mean filter sizes.
		5) Repeat step 3 again with the gaussian filter (if possible) and also use multiple gaussian filter sizes and different sigma values (with median value 0).
		6) We will then have 3 Best ROC values produced for each edge filter: 
					1 from applying the threshold alone. 
					1 from applying mean filter w/ threshold. 
					1 from applying gaussian filter w/ threshold.
					
	B) Compare all ROC values to determine best ROC value.
	C) Conclude on best edge filter to use for the image.
	
	
    







